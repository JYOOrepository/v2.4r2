##################################################################################################################################
##                                                         Macro List                                                           ##
##################################################################################################################################
[include pa_test.cfg]
[include Adaptive_Mesh.cfg]
[include Adaptive_Purge.cfg]

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  #  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  CLEAN_NOZZLE                                     # purge into bucket and cleans nozzles 

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  ADAPTIVE_PURGE
  G90                                              # Absolut position

##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    SET_PIN PIN=nevermore VALUE=0
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    STATUS_OFF
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PRINT_PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {action_respond_info("Running PAUSE...")}
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                                                  ; lift z amount
  
    {% if printer['pause_resume'].is_paused|int == 0 %}		
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                   ; set hotend temp variable for reference in resume macro
        SFS_DISABLE                                                                                                         ; disable filament sensor
        LIGHTS PRESET=PAUSED                                                                                                ; set lights to a paused state
        SAVE_GCODE_STATE NAME=PAUSE                                                                                         ; save current print position for resume
        BASE_PAUSE                                                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                      ; check that zhop doesn't exceed z max
            G91                                                                                                             ; relative positioning
            G1 Z{z} F900                                                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("PAUSE: Pause zhop exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                                 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                      ; set timeout to 12 hours
  {% endif %}
  
[gcode_macro PRINT_RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {action_respond_info("Running RESUME...")}
    # Parameters
    {% set e = params.E|default(2)|int %}
  
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                                                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         ; set timeout back to configured value
        {% if etemp > 0 %}
            LIGHTS PRESET=HEATING
            SET_EXTRUDER_WAIT TEMP={etemp|int}                                                                              ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                                                            ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                                 ; relative positioning
        M83                                                                                                                 ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                       ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                            ; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        LIGHTS PRESET=PRINTING
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                                                ; restore position
        UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=3                                                               ; Resume heater fan monitoring
        BASE_RESUME                                                                                                         ; resume print
    {% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {action_respond_info("Unloading filament...")}
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E10 F600                                                                                                             ; extrude a little to soften tip 
    G1 E-100 F900                                                                                                           ; retract filament completely
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
description: Load filament PERAMS: DISTANCE
gcode:
    {% set DISTANCE = params.DISTANCE|default(120)|float %}

    {action_respond_info("Loading filament...")}
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E{DISTANCE} F500
    G1 E-.75
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=LOADFILAMENT

##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro PRIME_NOZZLE] 
gcode: 
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE 
    
    M117 Priming 
    G90 ; Absolute coordinates. 
    M83 ; Relative extruder mode. 
    G92 E0 ; Move to start of line. 
    G1 Z10 F900 
    G1 Y5 X5 F18000 
    G1 Z0.2 F900 ; Print the line. 
    G91 ; Relative coordinates. 
    G1 X100 E25 F1000 ; Extrude filament 25mm (how much it retracted in PRINT_END). 
    G1 Y-2 F1000 
    G1 X-60 E9 F1000 ; Print second part of the line. 
    G1 E-0.5 F3000 ; Retract to avoid stringing. 
    G1 X0.5 E0 F1000 ; Wipe back to break string. 
    G1 X-5.5 E0 F1000 ; Wipe forward to break string. 
    
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
##TODO: SIMPLY THIS BY USING VARIABLES.
[gcode_macro PREHEAT_240] 
gcode:
    STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=240
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
    # (% if extruder_temp = 240 & heater_bed_temp = 110 %)
    STATUS_READY

[gcode_macro PREHEAT_TAP] 
gcode:
    STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
    # (% if extruder_temp = 240 & heater_bed_temp = 110 %)
    STATUS_READY

##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro G32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    #  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro _CG32]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G32
    {% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##


##------------------------------------------------------------START-------------------------------------------------------------##
# Name of the macro is clean_nozzle.

[gcode_macro clean_nozzle]

# If you are putting your purge bucket at the rear left of the bed as per default installation, enable True on your location_bucket_rear 
# variable. If you want to put your purge bucket elsewhere (perhaps the front), then set it to False. See diagrams and description 
# further below on how to set your XY position.
variable_location_bucket_rear:      False

# If you want the purging routine in your bucket enabled, set to True (and vice versa).
variable_enable_purge:              True

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:          10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:          10	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:     240	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:          2            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:         2            ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:          3  ; *** AFTER BED REPOSITION, CHANGE VALUE ***

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:        10	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:           10	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        10000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
## For V1.8, you may need to measure where your brush is on the x axis and input manually into any of the variable_brush_start uncommented.
## For V2.4 250mm build, uncomment this below: 
#variable_brush_start:     25	    

## For V2.4 300mm build, uncomment this below:
variable_brush_start:     138 ; *** AFTER BED REPOSITION, CHANGE VALUE ***

## For V2.4 350mm build, uncomment this below:
#variable_brush_start:     75

# This value is defaulted from brush location in CAD (rear left). Change if your brush width is different.
variable_brush_width:      35	

## These are only used if location_bucket_rear is False. You specify a custom location in y axis for your brush - see diagram above. ##
variable_brush_front:      304  ; *** AFTER BED REPOSITION, CHANGE VALUE ***
variable_brush_depth:      4    ; *** AFTER BED REPOSITION, CHANGE VALUE ***   


# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 
## For V2.4 250mm build, uncomment below 
#variable_bucket_left_width:    42    	    ; *** AFTER BED REPOSITION, CHANGE VALUE ***

## For V2.4 300mm build, uncomment below
variable_bucket_left_width:    72           ; *** AFTER BED REPOSITION, CHANGE VALUE ***

## For V2.4 350mm build, uncomment below
#variable_bucket_left_width:    92   

# These values are defaulted from bucket geometry in CAD (rear left location). Change only if you're using a custom bucket.
variable_bucket_right_width:   72      ; *** AFTER BED REPOSITION, CHANGE VALUE ***       
variable_bucket_gap:           1       ; *** AFTER BED REPOSITION, CHANGE VALUE ***

# For V1.8, you may need to measure where your bucket start is and input into bucket_start. Otherwise, a value of 0 is for a default
# installation of purge bucket at rear left.
variable_bucket_start: 85	           ; *** AFTER BED REPOSITION, CHANGE VALUE *** 


###############################################################################################################################################
###############################################################################################################################################

### From here on, unless you know what you're doing, it's recommended not to change anything. Feel free to peruse the code and reach out to me
### (edwardyeeks#6042) on Discord if you spot any problems!

###############################################################################################################################################
###############################################################################################################################################

# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}

      {% endif %}
   
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
         G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
      {% endfor %}
   
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{bucket_start + (bucket_left_width / 4)} F{prep_spd_xy} #bugfix for right side mounted buckets

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##


##------------------------------------------------------------START-------------------------------------------------------------##
# [gcode_macro _BEDFANVARS]
# variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
# variable_fast: 0.6		# Fan speed once bed temp is reached  
# variable_slow: 0.2		# Fan speed while bed is heating
# gcode:

# ########## Bed Fans #########

# [fan_generic BedFans]
# pin: PD13
# #cycle_time: 0.05
# kick_start_time: 0.5

# ########## Aliases #########

# [gcode_macro BEDFANSSLOW]
# gcode:
# 	# Vars
# 	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
# 	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

# [gcode_macro BEDFANSFAST]
# gcode:
# 	# Vars
# 	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
# 	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

# [gcode_macro BEDFANSOFF]
# gcode:
# 	SET_FAN_SPEED FAN=BedFans SPEED=0

# ############ Command overrides ############

# # Override, set fan speeds to low and start monitoring loop.
# [gcode_macro SET_HEATER_TEMPERATURE]
# rename_existing: _SET_HEATER_TEMPERATURE
# gcode:
# 	# Parameters
# 	{% set HEATER = params.HEATER|default("None") %}
# 	{% set TARGET = params.TARGET|default(0)|int %}
# 	# Vars
# 	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
# 	{% if HEATER|lower == "extruder" %}
# 		M104 S{TARGET}
# 	{% elif HEATER|lower == "heater_bed" %}
# 		M99140 S{TARGET}
# 	{% else %}
# 		{action_respond_info("Heater %s not supported" % HEATER)}
# 	{% endif %}

# 	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
# 	{% if HEATER|lower == "heater_bed" %}
# 		{% if TARGET >= THRESHOLD %}
# 			BEDFANSSLOW
# 			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
# 		{% else %}
# 			BEDFANSOFF
# 			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
# 		{% endif %}
# 	{% endif %}
	
# # Override M190 (Wait for Bed Temperature)
# # As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
# [gcode_macro M190]
# rename_existing: M99190
# gcode:
# 	# Parameters
# 	{% set S = params.S|int %}
# 	# Vars
# 	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
# 	{% if S >= THRESHOLD %}
# 		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
# 	{% else %}
# 		BEDFANSOFF																# < Threshold temp: Turn bed fans off
# 	{% endif %}                                        

# 	M140 {% for p in params
# 	  %}{'%s%s' % (p, params[p])}{%
# 	  endfor %}																	# Set bed temp
	  
# 	{% if S != 0 %}
# 		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
# 	{% endif %}

# 	# Post-heating fan speeds
# 	{% if S >= THRESHOLD %}								    
# 		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
# 	{% endif %}
	
# # Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
# [gcode_macro M140]
# rename_existing: M99140
# gcode:
# 	# Parameters
# 	{% set S = params.S|float %}
	
# 	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# # Replace TURN_OFF_HEATERS
# [gcode_macro TURN_OFF_HEATERS]
# rename_existing: _TURN_OFF_HEATERS
# gcode:
# 	BEDFANSOFF
# 	_TURN_OFF_HEATERS
	
# ################ Monitoring loop #####################

# # Turns bed fans to "fast" speed once target bed temp is reached.
# [delayed_gcode bedfanloop]
# gcode:
# 	# Vars
# 	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
# 	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
# 		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
# 			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
# 		{% else %}
# 			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
# 		{% endif %}
# 	{% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER
# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKBELTS]
description: Park the extruder toward the front of the printer to check belt tension. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER toward the front of the printer to check belt tension. Z at 20mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y108 Z20 F19500
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PARKNOZZLEHEAT]
description: Park the extruder near the purge bucket. Z at 20mm. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER near the purge bucket. Z at 20mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKNOZZLEHEAT
    G90
    G0 X{printer.toolhead.axis_maximum.x/3} Y{printer.toolhead.axis_maximum.y} Z20 F19500
    RESTORE_GCODE_STATE NAME=PARKNOZZLEHEAT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1
  {action_respond_info("Caselight on")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0
  {action_respond_info("Caselight off")}

[gcode_macro CASELIGHT]
description: Toggle light
gcode: {% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}
##-------------------------------------------------------------END--------------------------------------------------------------##

##------------------------------------------------------------START-------------------------------------------------------------##
# Macros for setting the status leds on the Voron StealthBurner toolhead (or for any neopixel-type leds).
#
# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.
#
# CONFIGURATION
#
# Example neopixel configuration:
[neopixel sb_leds]
pin: PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.#
#
# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file. 
#
# MACROS
#
# The following status macros are available:
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for direct control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle

variable_thermal_config: {
        'extruder': {
            'cool_temp': 40,
            'leds': 'logo',
        },
        'heater_bed': {
            'cool_temp': 40,
            'leds': 'nozzle',
        },
    }
# temperatures at which cooling will be considered complete

gcode:
    ; Do nothing

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

##-------------------------------------------------------------END--------------------------------------------------------------##

#####################################################################
#   ARCHIVES
#####################################################################

##------------------------------------------------------------START-------------------------------------------------------------##
##----------------------STANDARD PRINT START MACRO------------------------##
# [gcode_macro PRINT_START]
# #   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# gcode:
#      STATUS_HOMING      
#      G32                            ; home all axes
#      STATUS_LEVELING
#      G1 Z20 F3000                   ; move nozzle away from bed
#      STATUS_PRINTING
##-------------------------------------------------------------END--------------------------------------------------------------##
# ##----------------------ELLIS PROFILE------------------------##
# [gcode_macro PRINT_START]
# gcode:        
#     # Parameters
#     STATUS_HEATING                                                                    ; SB neoplex LED status
#     {% set bedtemp = params.BED|int %}
#     {% set hotendtemp = params.HOTEND|int %}
#     {% set chambertemp = params.CHAMBER|default(0)|int %}
#     M190 S{bedtemp}                                                                   ; set & wait for bed temp
#     M109 S{hotendtemp}
#     _CG32                                                                             ; Home all axis + tap                                                        
#     M190 S{bedtemp}                                                                   ; set & wait for bed temp
#     M109 S{hotendtemp}                                                                ; set & wait for hotend temp
#     # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chambertemp}   ; wait for chamber temp 
#     CLEAN_NOZZLE                                                                      ; Scrubby
#     STATUS_PRINTING                                                                   ; SB neoplex LED status
#     G90                                                                               ; absolute positioning
# ##----------------------ELLIS PROFILE------------------------##
